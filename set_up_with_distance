# %%
from pathlib import Path
import glob
import radiant_mlhub
import osgeo
from osgeo import gdal
from radiant_mlhub import Dataset
from shutil import copyfile
import rasterio as rio
import matplotlib.pyplot as plt
import numpy as np
import torch
import random
import os 
import cv2

from utils.augmentation_functions import normalize_per_band_and_scene, normalize_per_global_band_percentiles
from utils.augmentation_functions import a_brightness, a_adjust_contrast, a_adjust_sharpness, a_resized_crop, a_hor_flip, a_ver_flip
from utils.augmentation_functions import get_boundary, get_distance, get_crop
from utils.general_utils import create_mem_ds, copy_mem_ds

import torchvision.transforms.functional as TF
import torchvision.transforms as tran
from PIL import Image



## set all seeds that you can find ;)
torch.use_deterministic_algorithms(True)
random.seed(20)
torch.manual_seed(20)
np.random.seed(20)

## globals 
dataset_id = 'nasa_rwanda_field_boundary_competition'
project_path = Path.home()  / 'projects' / 'field_delination_BsiNet'

## download data?
download_data = False

## download data
if download_data:
    nasa_rwanda_field_boundary_competition = Dataset.fetch_by_id(dataset_id)
    nasa_rwanda_field_boundary_competition.download(output_dir=project_path / 'data')

# %% in
root_pth_scenes =     f'{project_path}/data/{dataset_id}/{dataset_id}_source_train'
root_pth_masks =      f'{project_path}/data/{dataset_id}/{dataset_id}_labels_train'
## out 
root_pth_scenes_out = f'{project_path}/data_preprocessed/train/image'
root_pth_masks_out =  f'{project_path}/data_preprocessed/train/mask'
root_pth_cont_out =  f'{project_path}/data_preprocessed/train/cont'
root_pth_dist_out =  f'{project_path}/data_preprocessed/train/dist'

##get in folders 
folders = sorted([d for d in next(os.walk(root_pth_scenes))[1]])


## define Augmentation routines 
## for each scene id same augmentation 


aug_1 = {'rot': 1, 'brightness': 1, 'adjust_contrast': 1,'adjust_sharpness': 1, 
            'resize_crop': [1,1,254,254], 'hor_flip': True, 'ver_flip': True, 'aug_name': "_a61_"}

aug_2 = {'rot': 2, 'brightness': 1, 'adjust_contrast': 1,'adjust_sharpness': 1, 
            'resize_crop': [2,2,250,250], 'hor_flip': True, 'ver_flip': True, 'aug_name': "_a62_"}

aug_3 = {'rot': 2, 'brightness': 1.1, 'adjust_contrast': 0.9,'adjust_sharpness': 1.05, 
            'resize_crop': [20,20,226,226], 'hor_flip': False, 'ver_flip': True, 'aug_name': "_a63_"}
    
aug_4 = {'rot': 3, 'brightness': 1.1, 'adjust_contrast': 0.85,'adjust_sharpness': 0.95, 
            'resize_crop': [5,5,220,220], 'hor_flip': True, 'ver_flip': False, 'aug_name': "_a64_"}
    
aug_5 = {'rot': 3, 'brightness': 0.95, 'adjust_contrast': 1.1,'adjust_sharpness': 1.2, 
            'resize_crop': [30,30,200,200], 'hor_flip': True, 'ver_flip': True, 'aug_name': "_a65_"}
    
##  get mean and std 
"""import csv
with open('/home/hemmerling/projects/field_delination_BsiNet/stats_data.csv',  newline='') as csvfile:

    spamreader = csv.reader(csvfile)
    for row in spamreader:

        print(row)"""

## add function that automatically does that from file path 

means =[140.94676311195445, 140.21714745070798, 205.48892510237937, 515.361331418026]
stds = [488.46370001006545, 835.3087745800353, 885.8593736168934, 3051.836265073185]



# %%
# stack original images in new augmentation folder 
for j, folder in enumerate(folders):

    ## get ids
    date_time  = folder[-7:]
    tile_id    = folder[-10:-8]


    full_path_scenes_in  = f'{root_pth_scenes}/{folder}'
    files = sorted(glob.glob(full_path_scenes_in+r'/*.tif'))
    
    ## get transforms 
    #dataset  = gdal.Open(files[1])
    #geotrans = dataset.GetGeoTransform()  
    #proj     = dataset.GetProjection()

    op = osgeo.gdal.BuildVRTOptions(separate=True)

    if not os.path.isdir(root_pth_scenes_out):
        os.makedirs(root_pth_scenes_out)
    if not os.path.isdir(root_pth_cont_out):
        os.makedirs(root_pth_cont_out)
    if not os.path.isdir(root_pth_dist_out):
        os.makedirs(root_pth_dist_out)
    if not os.path.isdir(root_pth_dist_out):
        os.makedirs(root_pth_dist_out)
   
   
    ## _a60_ --> original scene 
    full_file_path_scenes_out = root_pth_scenes_out + '/'+ tile_id +'_' + date_time + '_a60_.tif'
    vrt_path = root_pth_scenes_out + '/'+ tile_id +'_' + date_time + '_a60_.vrt'
    
    vrt = gdal.BuildVRT(vrt_path, files, options=op)
    del vrt 

    ## open vrt 
    vrt_image = rio.open(vrt_path).read()
    
    ## scale to 0-1 
    vrt_image = vrt_image / 10000

    ## standardize
    for i in range(4):

        mean  = means[i] / 10000
        std   = stds[i] / 10000

        vrt_image[i,:,:] = (vrt_image[i,:,:] - mean) / std 


    ## safe to floats
    mem_ds_scene = create_mem_ds(files[0], n_bands = 4, dtype=gdal.GDT_CFloat32)
    copy_mem_ds(pth=full_file_path_scenes_out, mem_ds=mem_ds_scene)
    for i in range(4):
           mem_ds_scene.GetRasterBand(i + 1).WriteArray(vrt_image[i])
    del mem_ds_scene

     ## path mask in 
    mask_folder_in  = folder.replace("source", "labels")
    full_path_mask_in  = f'{root_pth_masks}/{mask_folder_in}'[:-8]

    if not os.path.isdir(root_pth_masks_out):
        os.makedirs(root_pth_masks_out)

    ## set file names 
    mask_file_path_out = f"{root_pth_masks_out}/{tile_id}_{date_time}_a60_.tif"
    cont_file_path_out = f"{root_pth_cont_out}/{tile_id}_{date_time}_a60_.tif"
    dist_file_path_out = f"{root_pth_dist_out}/{tile_id}_{date_time}_a60_.tif"

    ## read and copy mask
    mask = rio.open(f"{full_path_mask_in}/raster_labels.tif").read()
    mem_ds_mask = create_mem_ds(files[0], n_bands = 1, dtype=gdal.GDT_Int16)
    copy_mem_ds(pth=mask_file_path_out, mem_ds=mem_ds_mask)
    for i in range(1):
           mem_ds_mask.GetRasterBand(i + 1).WriteArray(mask[i])
    del mem_ds_mask

    ## get boundary 
    cont     = get_crop(mask.transpose(1,2,0))

    # get distance
    dist = get_distance(cont)
    dist = np.nan_to_num(dist) 


    ## write boundary and dist 

    mem_ds_cont= create_mem_ds(files[0], n_bands = 1, dtype=gdal.GDT_Int16)
    copy_mem_ds(pth=cont_file_path_out, mem_ds=mem_ds_cont)
    for i in range(1):
           mem_ds_cont.GetRasterBand(i + 1).WriteArray(cont[-1,:,:])

    mem_ds_dist= create_mem_ds(files[0], n_bands = 1, dtype=gdal.GDT_Float32)
    copy_mem_ds(pth=dist_file_path_out, mem_ds=mem_ds_dist)
    for i in range(1):
           mem_ds_dist.GetRasterBand(i + 1).WriteArray(dist[-1,:,:])

    ## Augmentation
    #original_scene = torch.from_numpy(original_scene)
    #original_mask  = torch.from_numpy(original_mask)
   
    Augs = [aug_1, aug_2, aug_3, aug_4, aug_5]
    for u, aug in enumerate(Augs):
        nn = aug['aug_name']
        print("start augmentation with:", nn)

        if u == 0:
            scene_a60 = vrt_image
            mask_a60 = mask
            cont_a60 = cont
            dist_a60 = dist

    
        vrt_image = torch.permute(torch.from_numpy(scene_a60),(1,2,0))
        mask = torch.permute(torch.from_numpy(mask_a60),(1,2,0))
        cont = torch.permute(torch.from_numpy(cont_a60),(1,2,0))
        dist = torch.permute(torch.from_numpy(dist_a60),(1,2,0))
        
        scene = torch.rot90(vrt_image, aug['rot'], (0,1))
        mask  = torch.rot90(mask, aug['rot'], (0,1))
        cont  = torch.rot90(cont, aug['rot'], (0,1))
        dist  = torch.rot90(dist, aug['rot'], (0,1))

        ## brightness
        scene = a_brightness(scene, aug['brightness'], 4) 
        ## sharpness
        
        scene = a_adjust_sharpness(scene, aug['adjust_sharpness'], 4)
        ## contrast
        scene = a_adjust_contrast(scene, aug['adjust_contrast'], 4)
        ## resize
        scene = a_resized_crop(scene, 4, aug['resize_crop'][0],aug['resize_crop'][1],
            aug['resize_crop'][2],aug['resize_crop'][3], 256, tran.InterpolationMode.NEAREST)
        
        mask = a_resized_crop(mask.permute(2,0,1), 1, aug['resize_crop'][0],aug['resize_crop'][1],
            aug['resize_crop'][2],aug['resize_crop'][3], 256, tran.InterpolationMode.NEAREST)

        cont = a_resized_crop(cont.permute(2,0,1), 1, aug['resize_crop'][0],aug['resize_crop'][1],
            aug['resize_crop'][2],aug['resize_crop'][3], 256, tran.InterpolationMode.NEAREST)
        dist = a_resized_crop(dist.permute(2,0,1), 1, aug['resize_crop'][0],aug['resize_crop'][1],
            aug['resize_crop'][2],aug['resize_crop'][3], 256, tran.InterpolationMode.NEAREST)
 
        ## flips 
        if(aug['hor_flip']==True):
            scene = a_hor_flip(scene, 4)
            mask = a_hor_flip(mask, 1)
            cont = a_hor_flip(cont, 1)
            dist = a_hor_flip(dist, 1)
        if(aug['ver_flip']==True):
            scene = a_ver_flip(scene, 4)
            mask = a_ver_flip(mask, 1)
            cont = a_ver_flip(cont, 1)
            dist = a_ver_flip(dist, 1)


        ## write augmentations
        full_pth_aug_scene = f'{root_pth_scenes_out}/{tile_id}_{date_time}{nn}.tif'
        full_pth_aug_mask  = f'{root_pth_masks_out}/{tile_id}_{date_time}{nn}.tif'
        full_pth_aug_cont  = f'{root_pth_cont_out}/{tile_id}_{date_time}{nn}.tif'
        full_pth_aug_dist  = f'{root_pth_dist_out}/{tile_id}_{date_time}{nn}.tif'

        mem_img_aug  = create_mem_ds(files[0], 4)
        mem_img_msk  = create_mem_ds(files[0], 1)
        mem_img_cont = create_mem_ds(files[0], 1)
        mem_img_dist = create_mem_ds(files[0], 1)

        # write bands
        for b in range(scene.shape[0]):
            mem_img_aug.GetRasterBand(b+1).WriteArray(scene[b,:,:].numpy()) 

        mem_img_msk.GetRasterBand(1).WriteArray(mask[0,:,:].numpy()) 
        mem_img_cont.GetRasterBand(1).WriteArray(cont[0,:,:].numpy()) 
        mem_img_dist.GetRasterBand(1).WriteArray(dist[0,:,:].numpy()) 

        copy_mem_ds(full_pth_aug_scene, mem_img_aug)
        copy_mem_ds(full_pth_aug_mask,  mem_img_msk)
        copy_mem_ds(full_pth_aug_cont,  mem_img_cont)
        copy_mem_ds(full_pth_aug_dist,  mem_img_dist)

        scene = scene.numpy()
        mask = mask.numpy()
        cont = cont.numpy()
        dist = dist.numpy()

        print(scene.shape)
        print(mask.shape)
        print(cont.shape)
        print(dist.shape)

        ## print plot 
        if u == 0:
            fig, axes = plt.subplots(figsize=(8, 8), ncols= 4, nrows= 1 )
            ax, ax1, ax2, ax3 = axes.flatten()
            print(scene_a60.shape)
            ax.imshow(scene_a60.transpose(2,1,0))

            print(cont_a60.shape)
            ax1.imshow(mask_a60.transpose(2,1,0))
            print(cont_a60.dtype)
            ax2.imshow(cont_a60.transpose(2,1,0))
            ax3.imshow(dist_a60.transpose(2,1,0))
            plt.tight_layout()

        ploti = False
        if ploti:
            print(type(scene))
            print(type(mask))
            print(type(cont))
            print(type(dist))
            print(scene[1:10, 1:10])

            fig, axes = plt.subplots(figsize=(8, 8), ncols= 4, nrows= 1 )
            ax, ax1, ax2, ax3 = axes.flatten()
            print(scene.shape)
            ax.imshow(scene.transpose(2,1,0))

            print(cont.shape)
            ax1.imshow(mask.transpose(2,1,0))
            print(cont.dtype)
            ax2.imshow(cont.transpose(2,1,0))
            ax3.imshow(dist.transpose(2,1,0))
            plt.title(nn)
            plt.show
    
    
print("finish")




# %%